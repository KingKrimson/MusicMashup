<?xml version="1.0" encoding="UTF-8"?>
<dsa_metafile xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
              xsi:noNamespaceSchemaLocation="http://www.cems.uwe.ac.uk/~p-chatterjee/modules/dsa/group_metafile.xsd">
    <!-- Validates in Oxygen XML. -->

    <!-- The following is the assignment metadata (not to be changed) -->
    <module id="UFCEKG-20-2" acronymn="DSA">
        <title>Data Schemas &amp; Applications</title>
        <year>2013</year>
        <hand_in>2013-02-28</hand_in>
        <spec_url>http://www.cems.uwe.ac.uk/~p-chatterjee/2011/dsa/DSA_CW_Spec.html</spec_url>
    </module>
    <!-- end of metadata section -->

    <!-- Group Section -->
    <group>
        <member id="11008259" name="Andrew Brown"/>
        <member id="11010631" name="Chris Harpum"/>
        <member id="11017625" name="Adrien Clark"/>
        <member id="11034844" name="Tom Mc Fadden"/>
        <workshop>
            <daytime>Wednesday 11.00</daytime>
            <tutor>PM</tutor>
            <tutor>GW</tutor>
        </workshop>
        <!-- Each student should have contributed to one or more components -->
        <component type="Database Design">
            <contributor id="11008259"/>
            <contributor id="11017625"/>
            <contributor id="11034844"/>
            <!-- the following text fields allow for between 80 and 300 characters -->
            <description>Our group used the QSEE modelling tool to model a 2NF database with 
                the appropriate tables (artists, users, artistfavourites, etc.), 
                fields, primary keys and foreign keys. The workshop example based 
                on modelling a database for a quilt website was very 
                useful at aiding us in this task.
            </description>
            <problems>The design was fairly straight forward, and we did it with
                little to no problems. The only potential issue is the fact
                that QSEE doesn't support some datatypes we wanted to use in 
                MySQL; for instance, QSEE doesn't support 'datetime'.
            </problems>
            <solutions>For the model, we represented 'datetime' as 'timestamp,'
                and added a little comment box stating that they should
                be changed to 'datetime' in the physical database. This ensured
                that there was no ambiguity.
            </solutions>
            <!-- integer required between 1 and 120 -->
            <hours_effort>3</hours_effort>
        </component>
        <component type="Database Implementation">
            <contributor id="11008259"/>
            <contributor id="11034844"/>
            <description>Creating the initial MySQL database was really easy, as QSEE
                allowed us to export the design as a text file, which
                could be imported into PHPMyAdmin. From there, we
                hand populated the database with artists, albums,
                users, tracks, and various favourites(making sure to 
                include the correct/valid foreign keys) again using 
                PHPMyAdmin.
            </description>
            <problems>Intially, importing the text file into the database didn't work.
                This was because of the way that QSEE exported the file: it
                included comments in a non MySQL compatable style.
            </problems>
            <solutions>We opened the text file in notepad++, and stripped the comments.
                We then copied the remaining text, and executed it as a query,
                which was successful.
            </solutions>
            <hours_effort>4</hours_effort>
        </component>
        <component type="HTML Markup">
            <contributor id="11008259"/>
            <description>We decided to use HTML5 instead of XHTML, as HTML5 had some useful features, such
                as the 'hint' attribute for textboxes in forms. In XHTML, this attribute isn't supported,
                and would have to be replaced by javascript.
            </description>
            <problems>Since we echo a lot of HTML5 in PHP so that we can output 
                variables directly, the formatting of the HTML5 isn't very
                readable. If the user wanted to view the source using a browser, 
                they'd be in for a nasty shock.
            </problems>
            <solutions>We could have used PHP's heredoc operator to output literal
                Strings. However, that leads to some unpleasent formatting
                in the PHP code. As developers, we felt that it was more important
                that the PHP was readable for us, rather than the HTML
                being more readable by the users. We also output newlines at the
                end of each HTML5 echo statement.
            </solutions>
            <hours_effort>6</hours_effort>
        </component>
        <component type="PHP Coding">
            <contributor id="11008259"/>
            <contributor id="11010631"/>
            <description>Using PHP allowed us to create a dynamic, database driven site.
                by pulling data from the database we were able to show all of our albums,
                artists, tracks, users and favourites. We also implemented things
                like user login/registration and favouriting.
            </description>
            <problems>None of us had used PHP before, but it proved to be a very 
                easy language to learn. The only issues we encountered
                were the standard programming ones, like syntax and logic
                errors.
            </problems>
            <solutions>We solved these issues by studying php's syntax, double checking our code,
                and using Netbean's PHP debugger.
            </solutions>
            <hours_effort>12</hours_effort>
        </component>
        <component type="Javascript Coding">
            <contributor id="11008259"/>
            <description>We used javascript for ajax calls, which we use for sorting
                the tracks on the track page without reloading the page.
            </description>
            <problems>The method of creating and using a XMLHttpRequest object in pure
                javascript can be quite confusing.
            </problems>
            <solutions>There's some example code in the coursebook; we decided to
                use it as a starting point. It has been credited in the 
                source code comments.
            </solutions>
            <hours_effort>3</hours_effort>
        </component>
        <component type="CSS Design">
            <contributor id="11008259"/>
            <description>Since this is an alternative rock site, we decided to
                use a basic 'grungy' style for it. We chose an appropriate
                font for our logo, and wrote a stylesheet that nicely partitions
                up all of the appropriate sections.
            </description>
            <problems> None of us were very good at styling or writing CSS stylesheets,
                This posed a problem, as a dynamic website like this that doesn't have any
                formatting is almost unusable.
            </problems>
            <solutions> We decided that using a functional but plain stylesheet was
                preferable to spending hours creating a pretty website.
                to pretty up the site. We took the stylesheet 
                from Andrew's previous website, and used that as a base. 
                This has been noted in the CSS comments. 
            </solutions>
            <hours_effort>3</hours_effort>
        </component>
        <component type="XML Markup">
            <contributor id="11008259" />
            <description>As the website was required a valid RSS 2.0 feed of the
                most recently favourited artists, we used a php script to write the 
                feed based on the favourites that we have in our database. We also
                used XML for this metafile.
            </description>
            <problems>We weren't entirely sure how to construct a valid RSS
                feed, or how to actually present it once it had been
                created.
            </problems>
            <solutions>We looked up the RSS specification and schema online, so 
                that we knew how to create a valid RSS 2.0 feed. We decided
                that after the favourites had been processed and put into the feed,
                we would just present the resulting file as is (with no accompanying HTML), 
                as that is how most sites format their RSS feeds.
            </solutions>
            <hours_effort>2</hours_effort>
        </component>
    </group>

    <!-- Individual components are listed here -->
    <individual id="11008259">
        <component type="Social Media">
            <description>This widget uses Twitter's search API to search Twitter 
                for the artist of the 'item' that the user  is currently 
                viewing (or 'AlternativeRock' if they are not looking 
                at an artist, album or track.) Twitter returns the tweets 
                as a json string, which the widget then evaluates, 
                parses, and displays in a user-readable format.
            </description>
            <problems>Twitter's search API has a rate limit of 180 requests for 15
                minute intervals. Everytime a page is reloaded, the widget
                would make a new twitter query. If multiple users were accessing
                the site, then this means twitter would eventually stop
                letting the widget query it.
            </problems>
            <solutions>For the rate limit, I decided that the best solution would
                be to cache the json strings in their own database table, and only
                query twitter for the json if it has been 3 minutes since 
                the last 'artist' query. This means that my widget 
                doesn't query twitter every time the page reloads.
            </solutions>
            <hours_effort>5</hours_effort>
        </component>
    </individual>
    <individual id="11010631">
        <component type="Social Media">
            <description>A Widget that retrieves the most recent activity from a relevant social
                media website (in this case, Facebook) with a "like" count and links to
                important website posts.
            </description>
            <problems>A general lack of knowledge of the Facebook API and all of its caveats
                led to significant amount of bugs, ranging from the inability to retrieve
                required data, to having it parsed entirely wrong, ruining the aesthetic
                of the site.
            </problems>
            <solutions>Further experimentation with the API and basic Jquery fixed many of the
                obvious issues, though a major problem remains of which the nature is
                unknown. The facebook API requires a authentication code that, as of 
                30/04/2012, cannot be made permanent and so requires manual intervention
                for non-native implementations, such as the website. No solution seems to
                be available directly and so the nature of this bug is still somewhat
                problematic.
            </solutions>
            <hours_effort>6</hours_effort>
        </component>
    </individual>
    <individual id="11017625">
        <component type="Other">
            <description> My widget is grabbing pictures with search/tag criterie from the Flickr picture database. It is putting it into a
                div tag with a line break. 
            </description>
            <problems>When I was implementing it with the database I forgot to go through the sql server and tried to search for an 
                artist or band sql query instead of the name of the band or album.
            </problems>
            <solutions> Open the database within the php code. So asked Andrew and Tom to help with the solution on this so help me add
                the part of the code that connected to the database. To get the artist name and/or album name.
            </solutions>
            <hours_effort>4</hours_effort>
        </component>
    </individual>
    <individual id="11034844">
        <component type="Other">
            <description>A Widget to search LyricWiki for the lyrics to a track. Posts a short 
                snipit of the Lyrics (limited due to licencing reasons), and a link 
                to the Wiki page for that song.(Inactive on non track pages)
            </description>
            <problems>I was originally using the "fmt=json", which returns invalid JSON (using single quotes 
                to enclose the name and value) and attempting to covert the retreved string to an object
                failed. Similarly I had some trouble using urlencode(), which changed the formating of of
                the URI to one that file_get_contents() could not understand
            </problems>
            <solutions>As "fmt=json" had been retained to prevent breaking existing systems based on the API,
                changing to "fmt=realjson" provide valid JSON. I stoped the use of urlencode, as it was
                inappropriate for what I was attempting to do, manually ensuring the formatting of the URI
            </solutions>
            <hours_effort>8</hours_effort>
        </component>
    </individual>


    <!-- This section gives a link to 1-2 group components, lists the technologies used and 
        points to any number of source files. Note that the more that these links work - 
        the higher the mark for this section. Of course - the base_url link must work!! -->
    <application>
        <!-- Make sure the base_url for the main application is reachable as 
            http://www.cems.uwe.ac.uk/~a-student/dsa/ or something very similar -->
        <base_url>http://www.cems.uwe.ac.uk/~ad3-brown/DSA/MusicMashup</base_url>
        <!-- a list of up to 8 technologies used (see schema) -->
        <technologies>
            <tech>php</tech>
            <tech>html5</tech>
            <tech>xml</tech>
            <tech>javascript</tech>
            <tech>css</tech>  
        </technologies>
        <!-- configuration source file if one is used - should be a .phps or .xml -->
        <config_source>http://www.cems.uwe.ac.uk/~ad3-brown/DSA/MusicMashup/Source/databasevars.phps</config_source>
        <!-- URL of the Data Model - could be a HTML page with ann image or a gif file -->
        <dm_source>http://www.cems.uwe.ac.uk/~ad3-brown/DSA/MusicMashup/Database/datamodel.gif</dm_source>
        <source_files>
            <file>
                <name>index.php</name>
                <purpose>main application file</purpose>
                <source_url>http://www.cems.uwe.ac.uk/~ad3-brown/DSA/MusicMashup/Source/index.phps</source_url>
            </file>
            <file>
                <name>andrewstwitterwidget.phps</name>
                <purpose>Displays a twitter feed about the selected artist. Andrew's widget.</purpose>
                <source_url>http://www.cems.uwe.ac.uk/~ad3-brown/DSA/MusicMashup/Source/andrewstwitterwidget.phps</source_url>
            </file>
            <file>
                <name>flickrsearch3.phps</name>
                <purpose>Display flickr pictures of the current artist. Adrien's widget.</purpose>
                <source_url>http://www.cems.uwe.ac.uk/~ad3-brown/DSA/MusicMashup/Source/flickrsearch3.phps</source_url>
            </file>
            <file>
                <name>LyricsWidget.phps</name>
                <purpose>Displays lyrics for the current track. Tom's widget.</purpose>
                <source_url>http://www.cems.uwe.ac.uk/~ad3-brown/DSA/MusicMashup/Source/LyricsWidget.phps</source_url>
            </file>
            <file>
                <name>facebookwidget.txt</name>
                <purpose>Display the latest posts from alternews on its facebook page. Chris's widget.</purpose>
                <source_url>http://www.cems.uwe.ac.uk/~ad3-brown/DSA/MusicMashup/Source/facebookwidget.htm</source_url>
            </file>
            <file>
                <name>tracklist.phps</name>
                <purpose>Displays the tracks in the database, along with their artist, album, date released, and favourite count.</purpose>
                <source_url>http://www.cems.uwe.ac.uk/~ad3-brown/DSA/MusicMashup/Source/tracklist.phps</source_url>
            </file>
            <file>
                <name>rssfeed.phps</name>
                <purpose>Writes a RSS 2.0 feed based off of the favourites in the database.</purpose>
                <source_url>http://www.cems.uwe.ac.uk/~ad3-brown/DSA/MusicMashup/Source/rssfeed.phps</source_url>
            </file>
            <file>
                <name>Source directory</name>
                <purpose>As we had more than 8 files to submit, here is a link to the source directory. 
                         The files were listed in the document with this link in it, and also here:
                         alternews.css, albumlist.phps, bandlist.phps, favourite.phps, flickrlib.phps,
                         footer.html, header.phps, login.phps, registration.phps, sortitems.js,
                         sortitems.phps, userlist.phps, widgetpane.phps.</purpose>
                <source_url>http://www.cems.uwe.ac.uk/~ad3-brown/DSA/MusicMashup/Source/</source_url>
            </file>
        </source_files>
    </application>

    <!-- something about any learning outcomes achieved and any other overall comments -->
    <overall_comments> 
        While none of us had any significant prior experience in webdesign, we believe that we have produced a solid,
        functional, database driven website. Items from the database are displayed correctly, a valid RSS 2.0 feed is
        produced, users can register, login, and favourite items, and items are sortable by name, their number of 
        favourites, and their release date. Overall, we are proud of our work; The site itself may not be very pretty, 
        but the CSS layout is logical, and the site is easy to use.  
    </overall_comments>
</dsa_metafile>

